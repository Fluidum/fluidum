/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ConfirmedOwner",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwner__factory>;
    getContractFactory(
      name: "ConfirmedOwnerWithProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ConfirmedOwnerWithProposal__factory>;
    getContractFactory(
      name: "LinkTokenInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinkTokenInterface__factory>;
    getContractFactory(
      name: "OwnableInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableInterface__factory>;
    getContractFactory(
      name: "VRFConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VRFConsumerBase__factory>;
    getContractFactory(
      name: "FluidumContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FluidumContract__factory>;
    getContractFactory(
      name: "OnBoardContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnBoardContract__factory>;
    getContractFactory(
      name: "StreamContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StreamContract__factory>;
    getContractFactory(
      name: "TestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestContract__factory>;
    getContractFactory(
      name: "TestContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestContract__factory>;
    getContractFactory(
      name: "UserRegistration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UserRegistration__factory>;

    getContractAt(
      name: "ConfirmedOwner",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwner>;
    getContractAt(
      name: "ConfirmedOwnerWithProposal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ConfirmedOwnerWithProposal>;
    getContractAt(
      name: "LinkTokenInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinkTokenInterface>;
    getContractAt(
      name: "OwnableInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableInterface>;
    getContractAt(
      name: "VRFConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VRFConsumerBase>;
    getContractAt(
      name: "FluidumContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FluidumContract>;
    getContractAt(
      name: "OnBoardContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnBoardContract>;
    getContractAt(
      name: "StreamContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StreamContract>;
    getContractAt(
      name: "TestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestContract>;
    getContractAt(
      name: "TestContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestContract>;
    getContractAt(
      name: "UserRegistration",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UserRegistration>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
