/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestContract, TestContractInterface } from "../TestContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_greeting",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "requestId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "roller",
        type: "address",
      },
    ],
    name: "DiceRolled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "ValueChangedEvent",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "isCancelled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "phone",
        type: "uint256",
      },
    ],
    name: "onboarding",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000d1c38038062000d1c833981810160405281019062000037919062000278565b6200006760405180606001604052806022815260200162000cfa60229139826200008760201b620003571760201c565b80600090805190602001906200007f92919062000156565b5050620004c5565b620001298282604051602401620000a0929190620002fe565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506200012d60201b60201c565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546200016490620003ea565b90600052602060002090601f016020900481019282620001885760008555620001d4565b82601f10620001a357805160ff1916838001178555620001d4565b82800160010185558215620001d4579182015b82811115620001d3578251825591602001919060010190620001b6565b5b509050620001e39190620001e7565b5090565b5b8082111562000202576000816000905550600101620001e8565b5090565b60006200021d620002178462000362565b62000339565b9050828152602081018484840111156200023657600080fd5b62000243848285620003b4565b509392505050565b600082601f8301126200025d57600080fd5b81516200026f84826020860162000206565b91505092915050565b6000602082840312156200028b57600080fd5b600082015167ffffffffffffffff811115620002a657600080fd5b620002b4848285016200024b565b91505092915050565b6000620002ca8262000398565b620002d68185620003a3565b9350620002e8818560208601620003b4565b620002f381620004b4565b840191505092915050565b600060408201905081810360008301526200031a8185620002bd565b90508181036020830152620003308184620002bd565b90509392505050565b60006200034562000358565b905062000353828262000420565b919050565b6000604051905090565b600067ffffffffffffffff82111562000380576200037f62000485565b5b6200038b82620004b4565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60005b83811015620003d4578082015181840152602081019050620003b7565b83811115620003e4576000848401525b50505050565b600060028204905060018216806200040357607f821691505b602082108114156200041a576200041962000456565b5b50919050565b6200042b82620004b4565b810181811067ffffffffffffffff821117156200044d576200044c62000485565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61082580620004d56000396000f3fe60806040526004361061002d5760003560e01c80637ac7972114610070578063cdf92c27146100ad5761006b565b3661006b577fea53d3f1d99070699e7fb9a6dc39d1da30c51ed72db15c8c0b5640a8fe3d1f41346040516100619190610661565b60405180910390a1005b600080fd5b34801561007c57600080fd5b506100976004803603810190610092919061056d565b6100ea565b6040516100a49190610608565b60405180910390f35b3480156100b957600080fd5b506100d460048036038101906100cf919061056d565b61028c565b6040516100e191906105ed565b60405180910390f35b60606100f5826103f3565b60405180606001604052806104d281526020016040518060400160405280600881526020017f6d69207465657874000000000000000000000000000000000000000000000000815250815260200142815250600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010190805190602001906101ac9291906104b5565b5060408201518160020155905050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461020790610737565b80601f016020809104026020016040519081016040528092919081815260200182805461023390610737565b80156102805780601f1061025557610100808354040283529160200191610280565b820191906000526020600020905b81548152906001019060200180831161026357829003601f168201915b50505050509050919050565b600080600190506102ea6014600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546102e59190610698565b6103f3565b6102f3426103f3565b826014600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201546103439190610698565b111561034e57600090505b80915050919050565b6103ef828260405160240161036d92919061062a565b6040516020818303038152906040527f4b5c4277000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061048c565b5050565b610489816040516024016104079190610661565b6040516020818303038152906040527ff5b1bba9000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061048c565b50565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b8280546104c190610737565b90600052602060002090601f0160209004810192826104e3576000855561052a565b82601f106104fc57805160ff191683800117855561052a565b8280016001018555821561052a579182015b8281111561052957825182559160200191906001019061050e565b5b509050610537919061053b565b5090565b5b8082111561055457600081600090555060010161053c565b5090565b600081359050610567816107d8565b92915050565b60006020828403121561057f57600080fd5b600061058d84828501610558565b91505092915050565b61059f816106ee565b82525050565b60006105b08261067c565b6105ba8185610687565b93506105ca818560208601610704565b6105d3816107c7565b840191505092915050565b6105e7816106fa565b82525050565b60006020820190506106026000830184610596565b92915050565b6000602082019050818103600083015261062281846105a5565b905092915050565b6000604082019050818103600083015261064481856105a5565b9050818103602083015261065881846105a5565b90509392505050565b600060208201905061067660008301846105de565b92915050565b600081519050919050565b600082825260208201905092915050565b60006106a3826106fa565b91506106ae836106fa565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156106e3576106e2610769565b5b828201905092915050565b60008115159050919050565b6000819050919050565b60005b83811015610722578082015181840152602081019050610707565b83811115610731576000848401525b50505050565b6000600282049050600182168061074f57607f821691505b6020821081141561076357610762610798565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b6107e1816106fa565b81146107ec57600080fd5b5056fea26469706673582212209ad4966e518d46ea4647bca31d53f1998e7dfd1cd7b1d32a4e2bc458296a103264736f6c634300080400334465706c6f79696e67206120477265657465722077697468206772656574696e673a";

export class TestContract__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestContract> {
    return super.deploy(_greeting, overrides || {}) as Promise<TestContract>;
  }
  getDeployTransaction(
    _greeting: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_greeting, overrides || {});
  }
  attach(address: string): TestContract {
    return super.attach(address) as TestContract;
  }
  connect(signer: Signer): TestContract__factory {
    return super.connect(signer) as TestContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestContractInterface {
    return new utils.Interface(_abi) as TestContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestContract {
    return new Contract(address, _abi, signerOrProvider) as TestContract;
  }
}
